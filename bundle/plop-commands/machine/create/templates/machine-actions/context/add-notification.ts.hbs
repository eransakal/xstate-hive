import { assign } from '@xstate/immer';
import {
  {{pascalCase name}}MachineContext,
  {{pascalCase name}}MachineEvents,
  {{pascalCase name}}MachineEventsTypes,
} from '../types';
{{> xstateLogger machineName=name loggerName='addNotification' isKME=isKME loggerType='Machine' loggerPath='../utils/'}}

// Note: you can replace it with the 'nano' library if you have a dependency on it
let notificationCounter = 1;

export const addNotification = assign<
  {{pascalCase name}}MachineContext,
  {{pascalCase name}}MachineEvents
>((context, event) => {
  if (event.type === {{pascalCase name}}MachineEventsTypes.AddNotification) {
    const { type, ...rest} = event;
    const notification = {
      ...rest,
      id: `${{camelCase name}}-${notificationCounter}`,
    };
    notificationCounter++;

    logger.log({
      message: 'Add notification to context',
      data: {
        notification,
      },
    });

    context.notifications.push(notification);
  }
});
