import { createMachine } from 'xstate';
import {
  {{pascalCase name}}MachineContext,
  {{pascalCase name}}MachineEvents,
  {{pascalCase name}}MachineEventsTypes,
  {{pascalCase name}}MachineId,  
  createDefault{{pascalCase name}}MachineContext
} from '../types';

export const create{{pascalCase name}}Machine = () => {
  return createMachine<{{pascalCase name}}MachineContext, {{pascalCase name}}MachineEvents>({
    id: {{pascalCase name}}MachineId,{{#if isKME}}{{else}}
    predictableActionArguments: true,{{/if}}
    preserveActionOrder: true,
    type: 'parallel',
    invoke: {
      src: 'onExternalInfoUpdated',
      data: {
        emitLastValue: true
      }
    },
    on: {
      [{{pascalCase name}}MachineEventsTypes.ExternalInfoUpdated]: {
        actions: 'updateExternalInfo',        
      },
    },
    states: {},
  }).withContext(
    createDefault{{pascalCase name}}MachineContext()
  )
};
