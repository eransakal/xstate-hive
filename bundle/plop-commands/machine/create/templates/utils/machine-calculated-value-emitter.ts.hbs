import React, { useContext, useEffect, useMemo, useRef } from 'react';
import { {{pascalCase name}}Context } from './{{dashCase name}}-context';
import { {{pascalCase name}}MachineContext, {{pascalCase name}}MachineEvents, {{pascalCase name}}MachineState } from '../types';
import { useSelector } from '@xstate/react';
{{> xstateLogger machineName=name isKME=isKME loggerType='Util' loggerName='MachineCalculatedValueEmitter' loggerPath='./'}}

export interface Props<TValue> {  
  formula: (context: {{pascalCase name}}MachineContext) => TValue;
  event: (value: TValue) => {{pascalCase name}}MachineEvents  
}

export function MachineCalculatedValueEmitter<T>(props: Props<T>) {
  const { {{camelCase name}}MachineService } = useContext({{pascalCase name}}Context);

  const eventRef = useRef(props.event);
  eventRef.current = props.event;

  const formula = props?.formula;
  const selector = useMemo(() => {
    return (state: {{pascalCase name}}MachineState) => {
      return formula?.(state.context);
    }
  }, [formula]);
  
  const value = useSelector({{camelCase name}}MachineService, selector);
  useEffect(() => {
    if (eventRef.current) {
      const event = eventRef.current(value)
      if (event) {
        logger.log({
          message: `emitting calculated value changed event '${event.type}'`
        });      
        {{camelCase name}}MachineService.send(event)
      }
    }
  }, [value, {{camelCase name}}MachineService]);

  return null;
}
