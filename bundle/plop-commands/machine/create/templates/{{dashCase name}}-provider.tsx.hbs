import React, { useState, useMemo, PropsWithChildren } from 'react';
import {
  {{pascalCase name}}Machine
} from './types';
import { create{{pascalCase name}}Machine } from './utils/create-{{dashCase name}}-machine';
import { useMachine } from '@xstate/react';
import { create{{pascalCase name}}MachineLogger } from './utils/logger';
import { {{pascalCase name}}Context } from './utils/{{dashCase name}}-context';
import { updateExternalInfo } from './machine-actions/context/update-external-info';
import { onExternalInfoChanged } from './machine-services/on-external-info-changed';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const logger =  create{{pascalCase name}}MachineLogger(
    '{{pascalCase name}}Provider'
  );

export const {{pascalCase name}}Provider: React.FC<PropsWithChildren> = ({ children }) => {
 
 const [machine] = useState(() => create{{pascalCase name}}Machine());

  const [, , {{lowerCase name}}MachineService] = useMachine<{{pascalCase name}}Machine>(machine, {
    actions: {
      updateExternalInfo 
    },
    services: {
      onExternalInfoChanged
     },
    guards: { },
  });


  const providerValue = useMemo(() => {
    return { {{lowerCase name}}MachineService };
  }, [{{lowerCase name}}MachineService]);

  return (
    <{{pascalCase name}}Context.Provider value={providerValue}>
      {children}
    </{{pascalCase name}}Context.Provider>
  );
};
