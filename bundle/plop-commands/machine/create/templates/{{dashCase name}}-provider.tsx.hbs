import React, { useState, useMemo, PropsWithChildren } from 'react';
import {
  {{pascalCase name}}Machine
} from './types';
import { create{{pascalCase name}}Machine } from './utils/create-{{dashCase name}}-machine';
import { useMachine } from '@xstate/react';
import { {{pascalCase name}}Context } from './utils/{{dashCase name}}-context';
import { updateExternalInfo } from './machine-actions/context/update-external-info';
import { onExternalInfoChanged } from './machine-services/on-external-info-changed';
{{> xstateLogger loggerName=(dynamicParam name 'Provider') isKME=isKME loggerType='Machine' loggerPath='./utils/'}}

export const {{pascalCase name}}Provider: React.FC<PropsWithChildren> = ({ children }) => {
 
 const [machine] = useState(() => create{{pascalCase name}}Machine());

  const [, , {{camelCase name}}MachineService] = useMachine<{{pascalCase name}}Machine>(machine, {
    actions: {
      updateExternalInfo 
    },
    services: {
      onExternalInfoChanged
     },
    guards: { },
  });

  const providerValue = useMemo(() => {
    return { {{camelCase name}}MachineService };
  }, [{{camelCase name}}MachineService]);

  return (
    <{{pascalCase name}}Context.Provider value={providerValue}>
      {children}
    </{{pascalCase name}}Context.Provider>
  );
};
